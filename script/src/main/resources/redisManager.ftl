package cn.jpush.commons.utils.cache.redis;

import cn.jpush.alarm.AlarmClient;
import cn.jpush.commons.utils.io.SerializeUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import redis.clients.jedis.Jedis;
import redis.clients.jedis.JedisCommands;
import redis.clients.jedis.exceptions.JedisConnectionException;

import java.util.HashMap;
import java.util.Map;
import java.util.Set;

/**
 *
 */
public class RedisCacheManager implements JedisCommands{
    private final Logger log = LoggerFactory.getLogger(RedisCacheManager.class);
    private static Map<String, RedisCacheManager> cache = new HashMap<String, RedisCacheManager>();
    private String poolName;

    /**
     * 构造函数
     *
     * @param poolName 队列名
     */
    private RedisCacheManager(String poolName) {
        super();
        this.poolName = poolName;
    }

    /**
     * 获取Redis缓存管理工具类的实例
     *
     * @param poolName 队列名
     */
    public static RedisCacheManager getInstanse(String poolName) {
        RedisCacheManager redisCacheManager = cache.get(poolName);
        if (cache.get(poolName) == null) {
            redisCacheManager = new RedisCacheManager(poolName);
            cache.put(poolName, redisCacheManager);
        }
        return redisCacheManager;
    }

    /**
     * 获取jedis连接
     */
    public synchronized Jedis getJedis() {
        try {
            Jedis resource = JedisFactory.getJedisInstance(poolName);
            if (resource != null) {
                return resource;
            } else {
                log.error(String.format("[Redis] get %s redis is empty.", poolName));
                return null;
            }
        } catch (Exception e) {
            log.error(String.format("[Redis] get %s redis exception", poolName), e);
            return null;
        }
    }
<#list methods as method>

    /**
     * this code generated by FreeMarker
     * @auth linzh
     */
    public ${method.returnType} ${method.name}(<#list method.args as arg>final ${arg.type} ${arg.name}<#if arg_has_next>, </#if></#list>) {
        return new RedisExecutor<${method.returnWrapperType}>() {
            @Override
            ${method.returnWrapperType} execute() {
                return jedis.${method.name}(<#list method.args as arg>${arg.name}<#if arg_has_next>, </#if></#list>);
            }
        }.getResult();
    }
</#list>

    /**
     * 判断链接jedis对象是否为空
     */
    public boolean isNullRedis() {
        return getJedis() == null;
    }

    /**
     * 释放jedis资源
     *
     * @param jedis 待释放的jedis对象
     */
    public void releaseRedis(Jedis jedis) {
        if (jedis != null) {
            JedisFactory.release(poolName, jedis);
        }
    }

    /**
     * 有序优先级队列入队
     *
     * @param key   键(队列名)
     * @param value 值
     * @param score 优先级
     */
    public void sortedPriorityPush(final String key, final String value, final double score) {
        new RedisExecutor<Long>() {
            @Override
            Long execute() {
                Long result = jedis.zadd(key, score, value);
                log.info("[Redis({})] push data key = {},value = {} success ;return {}", poolName,
                        key, value, result);
                return result;
            }
        }.getResult();

    }

    /**
     * 有序优先级队列出队
     *
     * @param key 键(队列名)
     */
    public String sortedPriorityPop(final String key) {
        return new RedisExecutor<String>() {
            @Override
            String execute() {
                Set<String> set = jedis.zrange(key, 0, 0);
                if (set.size() > 0) {
                    String value = set.iterator().next();
                    jedis.zrem(key, value);
                    return value;
                }
                return null;
            }
        }.getResult();

    }

    /**
     * jdk 序列化set
     * @param key key.getBytes()
     * @param seconds
     * @param value 序列化
     * @return
     */
    public String setObjectEx(final String key,final int seconds, final Object value ) {
        return new RedisExecutor<String>() {
            @Override
            String execute() {
                return jedis.setex(key.getBytes(), seconds ,SerializeUtils.serialize(value));
            }
        }.getResult();
    }


    /**
     * 获取序列化存储的值
     * @param key
     * @return
     */
    public Object getObject(final String key) {
        return new RedisExecutor<Object>() {
            @Override
            Object execute() {
                return SerializeUtils.deserialize(jedis.get(key.getBytes()));
            }
        }.getResult();
    }

    abstract class RedisExecutor<T> {
        Jedis jedis;

        public RedisExecutor() {
            jedis = getJedis();
        }

        abstract T execute();

        /**
         * 调用{@link #execute()}并返回执行结果
         * 它保证在执行{@link #execute()}之后释放数据源returnResource(jedis)
         *
         * @return 执行结果
         */
        public T getResult() {
            T result = null;
            try {
                result = execute();
            } catch (JedisConnectionException e) {
                JedisFactory.realeaseBroken(poolName, jedis);

                log.error("[Redis] [poolName = {}] 执行命令时异常 ", poolName, e);
                AlarmClient.send(84,String.format("[redis:%s]JedisConnectionException:%s",poolName,e.getMessage()));
            } catch (Throwable e) {
                JedisFactory.realeaseBroken(poolName, jedis);
                log.error("[Redis] [poolName = {}] 执行命令时异常 ", poolName, e);
                AlarmClient.send(84,String.format("[redis:%s]Jedis操作异常:%s",poolName,e.getMessage()));

            }finally {
                JedisFactory.release(poolName, jedis);
            }
            return result;
        }
    }


}
